Search.setIndex({"alltitles": {"Attributes": [[2, "attributes"]], "CompSensePack": [[10, "compsensepack"]], "CompSensePack Package": [[0, null]], "Compressed Sensing Class": [[2, null]], "Compressed Sensing Class Graph": [[10, "compressed-sensing-class-graph"]], "Contents": [[10, "contents"]], "DCT Dictionary": [[6, null]], "Dictionaries Subpackage": [[0, "dictionaries-subpackage"]], "Dictionary Utilities": [[7, null]], "Evaluation and Plotting": [[9, null]], "Example": [[1, "example"], [4, "example"], [4, "id4"], [5, "example"], [6, "example"], [7, "example"], [7, "id3"], [7, "id6"], [7, "id9"], [9, "example"], [9, "id4"], [11, "example"], [11, "id4"], [12, "example"], [12, "id3"], [12, "id7"]], "Example usage:": [[3, "example-usage"], [4, "example-usage"], [5, "example-usage"], [6, "example-usage"], [7, "example-usage"], [9, "example-usage"], [11, "example-usage"], [12, "example-usage"]], "KSVD Dictionary Learning": [[3, null]], "MOD Dictionary Learning": [[4, null]], "Main Modules": [[0, "main-modules"]], "Measurement Matrix": [[11, null]], "Note:": [[9, "note"], [12, "note"]], "Notes": [[1, "notes"], [4, "notes"], [4, "id3"], [5, "notes"], [6, "notes"], [7, "notes"], [9, "notes"], [9, "id3"], [12, "notes"], [12, "id4"], [12, "id8"]], "OMP Algorithm": [[5, null]], "Parameters": [[1, "parameters"], [2, "parameters"], [2, "id2"], [2, "id4"], [2, "id13"], [2, "id15"], [2, "id17"], [3, "parameters"], [3, "id1"], [3, "id3"], [3, "id5"], [4, "parameters"], [4, "id1"], [5, "parameters"], [6, "parameters"], [7, "parameters"], [7, "id1"], [7, "id4"], [7, "id7"], [9, "parameters"], [9, "id1"], [11, "parameters"], [11, "id1"], [12, "parameters"], [12, "id1"], [12, "id5"]], "Project Overview": [[10, "project-overview"]], "Raises": [[2, "raises"], [2, "id1"], [2, "id3"], [2, "id5"], [2, "id6"], [2, "id7"], [2, "id8"], [2, "id9"], [2, "id10"], [2, "id11"], [2, "id12"], [2, "id14"], [2, "id16"], [2, "id18"], [3, "raises"], [6, "raises"], [11, "raises"], [11, "id3"]], "References:": [[1, "references"]], "Returns": [[1, "returns"], [2, "returns"], [3, "returns"], [3, "id2"], [3, "id4"], [3, "id6"], [4, "returns"], [4, "id2"], [5, "returns"], [6, "returns"], [7, "returns"], [7, "id2"], [7, "id5"], [7, "id8"], [9, "returns"], [9, "id2"], [11, "returns"], [11, "id2"], [12, "returns"], [12, "id2"], [12, "id6"]], "SL0 Algorithm": [[1, null]], "Utilities": [[12, null]], "Welcome to CompSensePack\u2019s Documentation!": [[10, null]]}, "docnames": ["CompSensePack", "SL0", "comp_sense_class", "dictionaries/KSVD", "dictionaries/MOD", "dictionaries/OMP", "dictionaries/dct_dictionary", "dictionaries/dictionary_utils", "dictionaries/index", "eval", "index", "measurement_matrix", "utils"], "envversion": {"sphinx": 62, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1}, "filenames": ["CompSensePack.rst", "SL0.rst", "comp_sense_class.rst", "dictionaries/KSVD.rst", "dictionaries/MOD.rst", "dictionaries/OMP.rst", "dictionaries/dct_dictionary.rst", "dictionaries/dictionary_utils.rst", "dictionaries/index.rst", "eval.rst", "index.rst", "measurement_matrix.rst", "utils.rst"], "indexentries": {"calculate_snr() (in module compsensepack.eval)": [[9, "CompSensePack.eval.calculate_snr", false]], "check_matrix_properties() (in module compsensepack.dictionaries.dictionary_utils)": [[7, "CompSensePack.dictionaries.dictionary_utils.check_matrix_properties", false]], "check_normalization() (in module compsensepack.dictionaries.dictionary_utils)": [[7, "CompSensePack.dictionaries.dictionary_utils.check_normalization", false]], "clear() (compsensepack.comp_sense_class.compressedsensing method)": [[2, "CompSensePack.comp_sense_class.compressedSensing.clear", false]], "compress_test_set() (compsensepack.comp_sense_class.compressedsensing method)": [[2, "CompSensePack.comp_sense_class.compressedSensing.compress_test_set", false]], "compressedsensing (class in compsensepack.comp_sense_class)": [[2, "CompSensePack.comp_sense_class.compressedSensing", false]], "compsensepack.comp_sense_class": [[2, "module-CompSensePack.comp_sense_class", false]], "compsensepack.dictionaries.dct_dictionary": [[6, "module-CompSensePack.dictionaries.dct_dictionary", false]], "compsensepack.dictionaries.dictionary_utils": [[7, "module-CompSensePack.dictionaries.dictionary_utils", false]], "compsensepack.dictionaries.ksvd": [[3, "module-CompSensePack.dictionaries.KSVD", false]], "compsensepack.dictionaries.mod": [[4, "module-CompSensePack.dictionaries.MOD", false]], "compsensepack.dictionaries.omp": [[5, "module-CompSensePack.dictionaries.OMP", false]], "compsensepack.eval": [[9, "module-CompSensePack.eval", false]], "compsensepack.measurement_matrix": [[11, "module-CompSensePack.measurement_matrix", false]], "compsensepack.sl0": [[1, "module-CompSensePack.SL0", false]], "compsensepack.utils": [[12, "module-CompSensePack.utils", false]], "compute_coherence() (in module compsensepack.dictionaries.dictionary_utils)": [[7, "CompSensePack.dictionaries.dictionary_utils.compute_coherence", false]], "compute_independent_columns() (in module compsensepack.dictionaries.dictionary_utils)": [[7, "CompSensePack.dictionaries.dictionary_utils.compute_independent_columns", false]], "dct_dictionary() (in module compsensepack.dictionaries.dct_dictionary)": [[6, "CompSensePack.dictionaries.dct_dictionary.dct_dictionary", false]], "divide_signal() (compsensepack.comp_sense_class.compressedsensing method)": [[2, "CompSensePack.comp_sense_class.compressedSensing.divide_signal", false]], "extract_model() (compsensepack.comp_sense_class.compressedsensing method)": [[2, "CompSensePack.comp_sense_class.compressedSensing.extract_model", false]], "generate_dbbd_matrix() (in module compsensepack.measurement_matrix)": [[11, "CompSensePack.measurement_matrix.generate_DBBD_matrix", false]], "generate_dictionary() (compsensepack.comp_sense_class.compressedsensing method)": [[2, "CompSensePack.comp_sense_class.compressedSensing.generate_dictionary", false]], "generate_random_matrix() (in module compsensepack.measurement_matrix)": [[11, "CompSensePack.measurement_matrix.generate_random_matrix", false]], "get_coeff_matrix() (compsensepack.comp_sense_class.compressedsensing method)": [[2, "CompSensePack.comp_sense_class.compressedSensing.get_coeff_matrix", false]], "get_compressed_signal() (compsensepack.comp_sense_class.compressedsensing method)": [[2, "CompSensePack.comp_sense_class.compressedSensing.get_compressed_signal", false]], "get_dictionary() (compsensepack.comp_sense_class.compressedsensing method)": [[2, "CompSensePack.comp_sense_class.compressedSensing.get_dictionary", false]], "get_measurement_matrix() (compsensepack.comp_sense_class.compressedsensing method)": [[2, "CompSensePack.comp_sense_class.compressedSensing.get_measurement_matrix", false]], "get_original_signal() (compsensepack.comp_sense_class.compressedsensing method)": [[2, "CompSensePack.comp_sense_class.compressedSensing.get_original_signal", false]], "get_reconstructed_signal() (compsensepack.comp_sense_class.compressedsensing method)": [[2, "CompSensePack.comp_sense_class.compressedSensing.get_reconstructed_signal", false]], "get_snr() (compsensepack.comp_sense_class.compressedsensing method)": [[2, "CompSensePack.comp_sense_class.compressedSensing.get_snr", false]], "get_test_set() (compsensepack.comp_sense_class.compressedsensing method)": [[2, "CompSensePack.comp_sense_class.compressedSensing.get_test_set", false]], "get_theta() (compsensepack.comp_sense_class.compressedsensing method)": [[2, "CompSensePack.comp_sense_class.compressedSensing.get_theta", false]], "get_theta_pinv() (compsensepack.comp_sense_class.compressedsensing method)": [[2, "CompSensePack.comp_sense_class.compressedSensing.get_theta_pinv", false]], "get_training_set() (compsensepack.comp_sense_class.compressedsensing method)": [[2, "CompSensePack.comp_sense_class.compressedSensing.get_training_set", false]], "i_cleardictionary() (in module compsensepack.dictionaries.ksvd)": [[3, "CompSensePack.dictionaries.KSVD.I_clearDictionary", false]], "i_findbetterdictionaryelement() (in module compsensepack.dictionaries.ksvd)": [[3, "CompSensePack.dictionaries.KSVD.I_findBetterDictionaryElement", false]], "i_finddistancebetweendictionaries() (in module compsensepack.dictionaries.mod)": [[4, "CompSensePack.dictionaries.MOD.I_findDistanceBetweenDictionaries", false]], "kronecker_activate() (compsensepack.comp_sense_class.compressedsensing method)": [[2, "CompSensePack.comp_sense_class.compressedSensing.kronecker_activate", false]], "ksvd() (in module compsensepack.dictionaries.ksvd)": [[3, "CompSensePack.dictionaries.KSVD.KSVD", false]], "load_signal_from_wfdb() (in module compsensepack.utils)": [[12, "CompSensePack.utils.load_signal_from_wfdb", false]], "mod() (in module compsensepack.dictionaries.mod)": [[4, "CompSensePack.dictionaries.MOD.MOD", false]], "module": [[1, "module-CompSensePack.SL0", false], [2, "module-CompSensePack.comp_sense_class", false], [3, "module-CompSensePack.dictionaries.KSVD", false], [4, "module-CompSensePack.dictionaries.MOD", false], [5, "module-CompSensePack.dictionaries.OMP", false], [6, "module-CompSensePack.dictionaries.dct_dictionary", false], [7, "module-CompSensePack.dictionaries.dictionary_utils", false], [9, "module-CompSensePack.eval", false], [11, "module-CompSensePack.measurement_matrix", false], [12, "module-CompSensePack.utils", false]], "omp() (in module compsensepack.dictionaries.omp)": [[5, "CompSensePack.dictionaries.OMP.OMP", false]], "plot_reconstructed_vs_original() (compsensepack.comp_sense_class.compressedsensing method)": [[2, "CompSensePack.comp_sense_class.compressedSensing.plot_reconstructed_vs_original", false]], "plot_signals() (in module compsensepack.eval)": [[9, "CompSensePack.eval.plot_signals", false]], "printformatted() (in module compsensepack.utils)": [[12, "CompSensePack.utils.printFormatted", false]], "py_test_csv() (in module compsensepack.utils)": [[12, "CompSensePack.utils.py_test_csv", false]], "recover_signal() (compsensepack.comp_sense_class.compressedsensing method)": [[2, "CompSensePack.comp_sense_class.compressedSensing.recover_signal", false]], "sl0() (in module compsensepack.sl0)": [[1, "CompSensePack.SL0.SL0", false]], "svds_vector() (in module compsensepack.dictionaries.ksvd)": [[3, "CompSensePack.dictionaries.KSVD.svds_vector", false]], "y_kron() (compsensepack.comp_sense_class.compressedsensing method)": [[2, "CompSensePack.comp_sense_class.compressedSensing.Y_kron", false]]}, "objects": {"CompSensePack": [[1, 0, 0, "-", "SL0"], [2, 0, 0, "-", "comp_sense_class"], [9, 0, 0, "-", "eval"], [11, 0, 0, "-", "measurement_matrix"], [12, 0, 0, "-", "utils"]], "CompSensePack.SL0": [[1, 1, 1, "", "SL0"]], "CompSensePack.comp_sense_class": [[2, 2, 1, "", "compressedSensing"]], "CompSensePack.comp_sense_class.compressedSensing": [[2, 3, 1, "", "Y_kron"], [2, 3, 1, "", "clear"], [2, 3, 1, "", "compress_test_set"], [2, 3, 1, "", "divide_signal"], [2, 3, 1, "", "extract_model"], [2, 3, 1, "", "generate_dictionary"], [2, 3, 1, "", "get_coeff_matrix"], [2, 3, 1, "", "get_compressed_signal"], [2, 3, 1, "", "get_dictionary"], [2, 3, 1, "", "get_measurement_matrix"], [2, 3, 1, "", "get_original_signal"], [2, 3, 1, "", "get_reconstructed_signal"], [2, 3, 1, "", "get_snr"], [2, 3, 1, "", "get_test_set"], [2, 3, 1, "", "get_theta"], [2, 3, 1, "", "get_theta_pinv"], [2, 3, 1, "", "get_training_set"], [2, 3, 1, "", "kronecker_activate"], [2, 3, 1, "", "plot_reconstructed_vs_original"], [2, 3, 1, "", "recover_signal"]], "CompSensePack.dictionaries": [[3, 0, 0, "-", "KSVD"], [4, 0, 0, "-", "MOD"], [5, 0, 0, "-", "OMP"], [6, 0, 0, "-", "dct_dictionary"], [7, 0, 0, "-", "dictionary_utils"]], "CompSensePack.dictionaries.KSVD": [[3, 1, 1, "", "I_clearDictionary"], [3, 1, 1, "", "I_findBetterDictionaryElement"], [3, 1, 1, "", "KSVD"], [3, 1, 1, "", "svds_vector"]], "CompSensePack.dictionaries.MOD": [[4, 1, 1, "", "I_findDistanceBetweenDictionaries"], [4, 1, 1, "", "MOD"]], "CompSensePack.dictionaries.OMP": [[5, 1, 1, "", "OMP"]], "CompSensePack.dictionaries.dct_dictionary": [[6, 1, 1, "", "dct_dictionary"]], "CompSensePack.dictionaries.dictionary_utils": [[7, 1, 1, "", "check_matrix_properties"], [7, 1, 1, "", "check_normalization"], [7, 1, 1, "", "compute_coherence"], [7, 1, 1, "", "compute_independent_columns"]], "CompSensePack.eval": [[9, 1, 1, "", "calculate_snr"], [9, 1, 1, "", "plot_signals"]], "CompSensePack.measurement_matrix": [[11, 1, 1, "", "generate_DBBD_matrix"], [11, 1, 1, "", "generate_random_matrix"]], "CompSensePack.utils": [[12, 1, 1, "", "load_signal_from_wfdb"], [12, 1, 1, "", "printFormatted"], [12, 1, 1, "", "py_test_csv"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:method"}, "terms": {"": [0, 1, 3, 5, 6, 12], "0": [1, 2, 3, 4, 6, 7, 9, 10, 11, 12], "0001": 12, "0001234": 12, "01": [1, 4, 11], "02": 11, "03": 11, "04": 11, "05": 11, "06": 11, "1": [2, 3, 6, 7, 9, 10, 11, 12], "10": [3, 4, 5, 7, 9, 12], "100": [3, 4, 5, 9, 12], "1000": 12, "123": 12, "16": 2, "1e": 7, "2": [1, 6, 7, 9, 11, 12], "20": 9, "200": [1, 3, 4, 5], "2008": 1, "2024": [1, 10], "2345": 12, "234567": 12, "2346": 12, "27059805": 6, "2d": [3, 12], "2f": 9, "3": [1, 7, 11, 12], "4": [1, 2, 6, 7, 12], "456789": 12, "4568": 12, "5": [1, 3, 4, 5, 6, 7, 9, 11, 12], "50": [1, 3, 4], "6": 7, "65328148": 6, "7": 7, "8": 7, "9": [7, 11], "9999999999999999": 7, "A": [1, 2, 3, 4, 7, 9, 11], "At": 10, "For": 9, "If": [1, 2, 3, 6, 9, 11, 12], "It": [1, 4, 5, 7, 9, 10, 12], "The": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "These": [7, 11], "a_pinv": 1, "about": 10, "absolut": 7, "access": 12, "achiev": [1, 10], "acquir": 10, "acquisit": 10, "across": 12, "activ": 2, "ad": 3, "adapt": 10, "adjust": [1, 2], "after": [2, 9], "against": 2, "algorithm": [0, 2, 3, 4, 8, 9, 10], "align": 12, "all": [0, 4, 7, 12], "allow": 10, "along": [3, 4], "alreadi": 2, "also": [3, 7, 10], "alwai": 3, "an": [1, 2, 3, 4, 6, 7, 9, 10, 12], "ani": [2, 7, 9, 12], "appli": [1, 2, 10], "applic": [7, 9, 11], "approach": 1, "approxim": [1, 3, 10], "ar": [0, 2, 4, 5, 6, 7, 9, 10, 11], "area": 6, "arrai": [2, 3, 6, 7, 11, 12], "arrhythmia": [10, 12], "assess": 7, "assumpt": 5, "atom": [3, 5], "attemp": 10, "audio": 10, "august": 1, "author": [1, 10], "babai": 1, "base": [2, 10, 11], "basi": [6, 10], "been": [2, 5], "befor": [2, 5], "begin": 1, "being": [1, 2], "benchmark": 10, "best": [1, 3, 4], "better": [9, 10], "betterdictionaryel": 3, "between": [2, 4, 7, 9], "bih": [10, 12], "binari": [10, 11], "block": [2, 11], "block_len": 2, "bool": [1, 2, 7, 9], "both": [0, 10], "box": [2, 9], "build": 10, "built": 10, "c": 10, "calcul": [4, 7, 9], "calculate_snr": 9, "call": [0, 2], "can": [2, 4, 9, 10], "captur": 10, "case": 10, "check": 7, "check_matrix_properti": [7, 8], "check_norm": [7, 8], "class": 0, "clear": [2, 3], "close": 7, "code": [1, 3, 4, 5, 7], "coef_matrix": [3, 4], "coeff_matrix": [2, 3], "coeffici": [2, 3, 4, 5, 6], "coher": 7, "column": [1, 2, 4, 5, 6, 7, 11, 12], "combin": 5, "commonli": 11, "commun": 10, "comp_len": 2, "comp_sense_class": 2, "compact": 6, "compar": [4, 9], "compon": [0, 6, 10], "compress": [0, 5, 6, 7, 11], "compress_test_set": 2, "compressedsens": [0, 2], "compsensepack": [1, 2, 3, 4, 5, 6, 7, 9, 11, 12], "comput": [1, 2, 7, 9], "compute_coher": [7, 8], "compute_independent_column": [7, 8], "concaten": 2, "concentr": 6, "condit": [4, 10], "configur": 12, "consid": 7, "consist": 4, "consol": 12, "contain": [0, 1, 2, 3, 4, 5, 7, 8, 11], "continu": 1, "control": [1, 2], "converg": 1, "convert": 12, "correct": 10, "correl": [5, 7], "correspond": 7, "cosin": 6, "cr": 2, "creat": [2, 6, 12], "csv": 12, "current": [2, 3, 5], "data": [3, 4, 6, 10], "databas": [10, 12], "datael": [3, 4], "date": 10, "db": 9, "dbbd": [2, 10, 11], "dbbd_matrix": 11, "dc": 3, "dct": [0, 2, 8, 10], "dct_dictionari": [6, 8], "dct_matrix": 6, "decibel": 9, "decim": 12, "decomposit": [3, 7], "default": [1, 2, 3, 7, 9, 11, 12], "defin": [2, 7], "degre": 7, "demonstr": 10, "depend": 2, "descent": 1, "design": 10, "determin": 7, "determinist": [10, 11], "develop": 10, "diagon": [7, 11], "dict": [2, 3, 4], "dict_matrix": 6, "dictio": 5, "dictionari": [2, 5, 8, 10], "dictionary_typ": 2, "dictionary_util": 7, "differ": [6, 7, 9, 11], "dimens": [3, 4, 5], "direct": 4, "directli": [10, 12], "directori": [0, 2, 9, 12], "discret": 6, "displai": [2, 9, 12], "distanc": 4, "distribut": 11, "divid": 2, "divide_sign": 2, "divis": 2, "doe": [9, 12], "doesn": 12, "domain": 10, "drawn": 11, "due": 6, "durat": 12, "duration_minut": 12, "dure": 1, "dwt": 10, "e": [2, 4, 5, 6, 7, 12], "each": [1, 4, 5, 6, 7, 11, 12], "ecg": [10, 12], "ee": 1, "effici": [6, 10], "either": [4, 9], "element": [3, 4, 7, 12], "enabl": 9, "end": 9, "energi": 6, "enough": 10, "ensur": [4, 9], "entir": [10, 12], "entri": [5, 11], "equal": 3, "equat": 1, "error": [3, 4, 9], "errorofel": 4, "especi": 12, "estim": 1, "etc": 2, "eval": [0, 2, 9], "evalu": [0, 10], "exampl": [8, 10], "execut": 10, "exist": 12, "experi": 10, "exploit": 10, "extract": 2, "extract_model": 2, "f": [9, 12], "fact": 10, "factor": [1, 2], "fals": [1, 2, 7, 9], "far": 10, "fast": 1, "faster": 10, "felxibl": 0, "few": 6, "fewer": 10, "field": 10, "file": [2, 9, 12], "filenam": [2, 9], "find": [5, 10], "first": [4, 6, 10, 12], "fit": 10, "fix": [0, 10], "flag": [2, 3], "float": [1, 2, 3, 4, 7, 9], "focal": 10, "follow": [2, 10, 12], "form": 2, "format": 12, "found": 2, "framework": 2, "francesco": 10, "frequenc": 6, "from": [1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12], "full": [7, 10], "function": [0, 1, 3, 4, 5, 6, 7, 9, 11, 12], "fundament": 10, "futur": 2, "g": 12, "gaussian": [1, 2, 10, 11], "gener": [0, 2, 6, 9, 10, 11], "generate_dbbd_matrix": 11, "generate_dictionari": 2, "generate_random_matrix": 11, "geometr": 1, "get_coeff_matrix": 2, "get_compressed_sign": 2, "get_dictionari": 2, "get_measurement_matrix": 2, "get_original_sign": 2, "get_reconstructed_sign": 2, "get_snr": 2, "get_test_set": 2, "get_theta": 2, "get_theta_pinv": 2, "get_training_set": 2, "github": 10, "given": [2, 5, 7, 9, 10], "givenmatrix": [3, 4], "gram": 7, "guarante": 0, "ha": [2, 5, 7, 9, 10], "halfwai": 9, "handl": 3, "hasn": 2, "have": [4, 5, 9, 12], "heart": 10, "high": 0, "higher": 9, "hossein": 1, "how": 3, "howev": 10, "http": 1, "i": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12], "i_cleardictionari": [3, 8], "i_findbetterdictionaryel": [3, 8], "i_finddistancebetweendictionari": [4, 8], "idea": 10, "ident": 9, "identifi": 7, "imag": [6, 10], "implement": [1, 2, 3, 4, 5], "import": [2, 3, 4, 5, 6, 7, 9, 11, 12], "improv": 12, "includ": [2, 3, 4, 9], "ind_col": 7, "independ": 7, "independent_column": 7, "index": 3, "indic": [2, 3, 7, 9], "infinit": 9, "inform": 10, "initi": [1, 3, 4], "initial_dictionari": [3, 4], "initialization_method": [3, 4], "inner": 1, "input": [2, 3, 4, 6, 7, 12], "inspect": 12, "instal": 12, "instanti": 2, "instead": 10, "int": [1, 2, 3, 4, 5, 6, 9, 11, 12], "integ": 2, "integr": 2, "interfac": 2, "intern": 1, "ir": 1, "is_kron": 2, "is_norm": 7, "iter": [1, 3, 4, 5], "its": [2, 6, 7], "j": 3, "jpeg": 6, "k": [2, 3, 4, 5, 8], "kei": [2, 4], "kernel": 1, "kron_fact": 2, "kroneck": 2, "kronecker_activ": 2, "ksvd": [0, 2, 8, 10], "ksvd_param": 2, "l": [1, 2, 3, 4], "l0": [1, 10], "l1": 10, "label": 2, "lead": 10, "learn": [0, 2, 7, 8, 10], "least": 4, "left": 3, "length": [2, 6, 9], "less": 9, "level": 0, "librari": [0, 10, 12], "like": [2, 10], "linear": 1, "linearli": 7, "linspac": 9, "liter": 10, "load": 12, "load_signal_from_wfdb": 12, "locat": 12, "log10": 9, "long": 10, "loop": 1, "low": [4, 9], "m": [1, 7, 11], "made": 2, "magnitud": 12, "main": [2, 10], "make": [6, 12], "mani": 10, "massoud": 1, "match": [3, 4, 5], "matlab": 1, "matplotlib": 9, "matric": [2, 7, 10, 11, 12], "matrix": [0, 1, 2, 3, 4, 5, 6, 7, 10, 12], "matrix_typ": [2, 11], "max_coeff": 5, "maximum": [5, 7], "mean": [1, 6, 9, 10], "measur": [0, 1, 2, 4, 7, 10], "measurement_matrix": [2, 11], "medic": 10, "method": [0, 2, 3, 4, 5, 10], "microvolt": 12, "millivolt": 12, "minim": [1, 10], "minimum": 1, "minut": 12, "mit": [10, 12], "mod": [0, 2, 8, 10], "mod_param": 2, "model": 2, "modifi": 4, "modul": [1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12], "modular": 0, "mohimani": 1, "moment": 10, "more": [1, 10], "most": [5, 6], "mu": 1, "mu_0": [1, 2], "much": 10, "multipl": [2, 11], "multipli": 12, "must": [2, 5], "mx1": 1, "mxn": 1, "n": [1, 3, 4, 5, 6, 7, 11], "name": [2, 9, 12], "natur": 10, "ndarrai": [1, 2, 3, 4, 5, 6, 7, 9, 11, 12], "necessari": 2, "need": [6, 10], "neg": 9, "new": [3, 4], "new_dict": 4, "new_dictionari": 4, "newvectad": 3, "nois": [2, 9], "non": [3, 4, 5, 7], "none": [1, 2, 7, 9, 12], "norm": [1, 3, 4, 5, 7, 9], "normal": [3, 4, 5, 7, 9, 11], "np": [1, 3, 4, 5, 7, 9, 12], "num_iter": [3, 4], "num_sampl": [2, 9], "number": [1, 2, 3, 4, 5, 9, 10, 11, 12], "numcoefus": 3, "numer": 12, "numpi": [1, 2, 3, 4, 5, 6, 7, 9, 11, 12], "nx1": 1, "nyquist": 10, "object": [0, 1, 2], "observ": 1, "off": 7, "offer": [0, 10], "omp": [0, 3, 4, 8, 10], "one": [3, 10, 11], "ones": 10, "oper": 7, "optim": 4, "option": [1, 2, 3, 4, 7, 9, 11, 12], "order": 10, "origin": [1, 2, 3, 4, 9, 10], "original_dict": 4, "original_nam": 9, "original_phi": 2, "original_sign": 9, "orthogon": [3, 4, 5, 6], "orthonorm": 6, "oscil": 6, "other": [6, 11], "otherwis": [7, 9], "output": 12, "output_dir": 12, "over": 5, "packag": [10, 12], "page": 1, "param": [3, 4], "parti": 12, "particularli": 10, "pass": 2, "path": [2, 9, 12], "percentag": [2, 9], "perform": [2, 4, 7, 10], "phase": 10, "phi": 2, "physionet": 12, "pipelin": 10, "place": 12, "plot": [0, 2, 10], "plot_reconstructed_vs_origin": 2, "plot_sign": 9, "point": [2, 9], "popular": 1, "port": 1, "posit": [2, 4, 6], "possibl": 10, "power": 10, "precomput": 1, "preserv": 3, "preserve_dc_atom": 3, "principl": 10, "print": [1, 6, 7, 9, 12], "printformat": 12, "problem": [1, 4, 10], "process": [1, 5, 6, 7, 9, 10, 11], "program": 0, "project": 12, "properli": 12, "properti": [6, 7], "provid": [1, 2, 4, 5, 6, 7, 9, 11, 12], "pseudoinvers": [1, 2], "pursuit": [3, 4, 5], "py": [1, 2, 3, 4, 5, 6, 7, 9, 11, 12], "py_test": 12, "py_test_csv": 12, "python": [1, 10], "qr": 7, "r": 7, "rais": 9, "rand": [9, 12], "randn": [1, 3, 4, 5, 7], "random": [1, 3, 4, 5, 7, 9, 11, 12], "random_matrix": 11, "randomli": 10, "rank": 7, "rate": 1, "ratio": [2, 4, 9], "re": 10, "reach": [1, 5], "readabl": [0, 12], "real": [2, 10], "reconstruct": [2, 9, 10], "reconstructed_label": 2, "reconstructed_nam": 9, "reconstructed_sign": [2, 9], "record": 12, "record_nam": 12, "recov": [1, 2, 9, 10], "recover_sign": 2, "recovered_sign": 9, "recoveri": [0, 1, 2, 5, 9, 10], "reduc": 1, "redund": 3, "refin": 4, "rel": 9, "relat": [3, 4], "reli": 5, "replac": 3, "repo": 10, "repositori": 10, "repres": [3, 4, 5, 6, 10], "represent": [3, 4, 5], "reprocess": 2, "requir": [4, 9, 10, 12], "reset": 2, "reshap": 2, "residu": 5, "result": [0, 6, 7, 9], "retriev": 2, "right": 3, "root": 12, "rosnati": 10, "rosnavig": 1, "routin": 0, "row": [1, 2, 7, 11], "run": [0, 3], "runtimeerror": 2, "same": [9, 10], "sampl": [2, 9, 10, 12], "satisfi": [1, 4], "save": [2, 9, 12], "save_path": [2, 9], "scale": [1, 10, 11], "scaled_binari": 11, "second": 10, "section": 9, "select": [5, 7], "self": 2, "sens": [0, 5, 7, 11], "septemb": 10, "set": [2, 3, 4, 10], "shape": [6, 11], "sharif": 1, "should": [1, 2, 4, 5, 9, 11, 12], "show": 9, "show_snr_box": [2, 9], "showprogress": [1, 2], "sig": 5, "sigma": 1, "sigma_decrease_factor": [1, 2], "sigma_min": [1, 2], "signal": [1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12], "similar": [7, 9], "simul": 10, "sin": 9, "singular": 3, "size": [2, 3, 4, 5, 6], "sl0": [0, 2, 10], "sl0_param": 2, "slzero": 1, "small": [4, 5], "smaller": [2, 10], "smooth": 1, "snapshot": 2, "snr": [2, 9], "solut": [1, 10], "solv": [1, 4, 10], "some": [9, 10], "sourc": [1, 2, 3, 4, 5, 6, 7, 9, 11, 12], "spars": [1, 2, 3, 4, 5, 7, 10], "sparse_cod": 5, "sparsest": [1, 10], "sparsifi": 10, "specif": 10, "specifi": [2, 9, 11, 12], "split": 2, "sqrt": 11, "squar": [4, 11], "start": [2, 4, 9], "start_pct": [2, 9], "state": 2, "statu": 2, "steepest": 1, "step": 4, "stop": 5, "store": 12, "str": [2, 3, 4, 9, 11, 12], "structur": 10, "subpackag": [8, 10], "suffici": 5, "suggest": 10, "sum": [4, 6], "support": 11, "sure": 12, "svd": [2, 3, 8], "svds_vector": [3, 8], "system": 1, "t": [2, 10, 12], "task": 7, "techniqu": [2, 10], "term": 6, "termin": 1, "test": [0, 2, 6, 10], "test_set": 2, "text": [2, 9], "th": 3, "than": [1, 2, 10], "theori": 10, "theta": 2, "theta_pinv": 2, "thi": [1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12], "third": 12, "those": 4, "though": 10, "through": [2, 9], "togeth": 9, "tol": 7, "toler": 7, "total_dist": 4, "totaldist": 4, "tradit": 10, "train": [2, 4, 10], "training_matrix": 2, "training_percentag": 2, "training_set": 2, "transform": 6, "true": [1, 7, 9], "two": [4, 7, 10], "type": [2, 11], "u": [3, 10], "underdetermin": 1, "underli": 10, "unit": [4, 5, 6, 7, 12], "unscal": 10, "unscaled_binari": 11, "until": 1, "updat": [3, 4, 5], "us": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12], "usag": 8, "usual": 10, "util": [0, 3, 4, 6, 8, 9, 10], "v": 3, "valid": 2, "valu": [1, 2, 3, 4, 7, 9, 12], "valuabl": 10, "valueerror": [2, 3, 6, 9, 11], "vari": 12, "varieti": 2, "variou": [0, 2, 7, 8, 9, 10, 12], "vector": [1, 3, 6], "veri": [4, 9], "verifi": 10, "version": [2, 10], "visual": [0, 9, 12], "vt": 3, "wa": [2, 3, 10], "wai": [2, 9, 12], "wavelet": 10, "we": 10, "web": 1, "were": 2, "wfdb": 12, "what": 10, "when": [1, 5, 12], "where": [1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12], "whether": [2, 9], "which": [1, 2, 3, 4, 5, 7, 10], "wide": [1, 3, 5, 6], "wireless": 10, "work": [7, 10], "world": 10, "would": 9, "x": [3, 4, 5, 7], "y": [1, 2], "y_kron": 2, "yet": 2, "zadeh": 1, "zero": [3, 4, 5, 7]}, "titles": ["CompSensePack Package", "SL0 Algorithm", "Compressed Sensing Class", "KSVD Dictionary Learning", "MOD Dictionary Learning", "OMP Algorithm", "DCT Dictionary", "Dictionary Utilities", "&lt;no title&gt;", "Evaluation and Plotting", "Welcome to CompSensePack\u2019s Documentation!", "Measurement Matrix", "Utilities"], "titleterms": {"": 10, "algorithm": [1, 5], "attribut": 2, "class": [2, 10], "compress": [2, 10], "compsensepack": [0, 10], "content": 10, "dct": 6, "dictionari": [0, 3, 4, 6, 7], "document": 10, "evalu": 9, "exampl": [1, 3, 4, 5, 6, 7, 9, 11, 12], "graph": 10, "ksvd": 3, "learn": [3, 4], "main": 0, "matrix": 11, "measur": 11, "mod": 4, "modul": 0, "note": [1, 4, 5, 6, 7, 9, 12], "omp": 5, "overview": 10, "packag": 0, "paramet": [1, 2, 3, 4, 5, 6, 7, 9, 11, 12], "plot": 9, "project": 10, "rais": [2, 3, 6, 11], "refer": 1, "return": [1, 2, 3, 4, 5, 6, 7, 9, 11, 12], "sens": [2, 10], "sl0": 1, "subpackag": 0, "usag": [3, 4, 5, 6, 7, 9, 11, 12], "util": [7, 12], "welcom": 10}})